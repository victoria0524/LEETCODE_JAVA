/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     ArrayList<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
public class Solution {
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) 
    {
        if(node==null)
        return null;
        HashMap<Integer, UndirectedGraphNode> map= new HashMap<Integer, UndirectedGraphNode>();
        return clone(node,map);
    }
    
    private UndirectedGraphNode clone(UndirectedGraphNode node, HashMap<Integer, UndirectedGraphNode> map)
    {
        if(map.containsKey(node.label))
            return map.get(node.label);
        
        UndirectedGraphNode root=new UndirectedGraphNode(node.label);
        map.put(root.label,root);
        
        for(int i=0; i<node.neighbors.size();i++)
        {   
            root.neighbors.add(clone(node.neighbors.get(i),map) );
        }
        return root;
        
    }
}
