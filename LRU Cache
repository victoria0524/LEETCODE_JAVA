public class LRUCache {
    private int cap;
    private HashMap<Integer, Node> map= new HashMap<Integer, Node>();
    private Node head= new Node(-1,-1); 
    private Node tail=head;
    private int count=0;
    
    public LRUCache(int capacity) 
    {
        this.cap=capacity;
        
    }
    
    public int get(int key) 
    {
        
        if(!map.containsKey(key))
        return -1;
        
        Node node=map.get(key);
        
        delete(node);
        insert(node);
        
        return node.value;
    }
    
    public void set(int key, int value) 
    {
        Node node=new Node(key,value);
        
        if(map.containsKey(key))
        {
            node=map.get(key);
            node.value=value;
            delete(node);
        }
        
        insert(node);
        
    }
    
    private void delete(Node node)
    {
        if(map.containsKey(node.key))
        map.remove(node.key);
        
        if(node==head)
        head=head.next;
        if(node==tail)
        tail=tail.pre;
        if(node.next!=null)
            node.next.pre=node.pre;
        if(node.pre!=null)
            node.pre.next=node.next;

        
        node.pre=null;
        node.next=null;
        
        count--;
    }
    
    private void insert(Node node)
    {
        if(count==cap)
        {
            delete(tail);
            if(map.containsKey(tail.key))
            map.remove(tail.key);
        }
        
        map.put(node.key,node);

        node.next=head;
                head.pre=node;
        head=node;
        
        count++;
    }
    
     private class Node {  
        public Node pre = null;  
        public int key;  
        public int value;  
        public Node next = null;  
  
        Node(int key, int value) {  
            this.key = key;  
            this.value = value;  
        }  
    }  
}
