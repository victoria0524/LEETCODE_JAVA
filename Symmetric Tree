/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isSymmetric(TreeNode root) 
    {
        if(root==null)
        return true;
        return isSym(root.left,root.right);
    }
    
    private boolean isSym(TreeNode one, TreeNode two)
    {
        if(one==null && two == null)
        return true;
        if (one== null || two == null) 
            return false;
        if(one.val!=two.val)
        return false;
        
        return isSym(one.left,two.right)&&isSym(one.right,two.left);
    }
}

public class Solution {
    public boolean isSymmetric(TreeNode root) 
    {
        if(root==null)
        return true;
        
        Queue<TreeNode> left= new LinkedList<TreeNode>();
        Queue<TreeNode> right= new LinkedList<TreeNode>();
        
        left.offer(root.left);
        right.offer(root.right);
        
        while(!left.isEmpty() && !right.isEmpty())
        {
            TreeNode temp1=left.poll();
            TreeNode temp2=right.poll();
            
            if(temp1==null && temp2!=null || temp1!=null && temp2==null)
                return false;
            
            if(temp1!=null)
            {   if(temp1.val!=temp2.val)
                    return false;
                left.offer(temp1.left);
                left.offer(temp1.right);
                right.offer(temp2.right);
                right.offer(temp2.left);
            }
        }
        
        return true;
    }
}
